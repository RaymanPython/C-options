std::unordered_map
#include <iostream>
#include <string>
#include <unordered_map>
 
int main()
{
    // Create an unordered_map of three strings (that map to strings)
    std::unordered_map<std::string, std::string> u = {
        {"RED","#FF0000"},
        {"GREEN","#00FF00"},
        {"BLUE","#0000FF"}
    };
 
    std::cout << "Iterate and print keys and values of unordered_map, being explicit with\n"
                 "the type of the iterator, n:\n";
    for( const std::pair<std::string, std::string>& n : u ) {
        std::cout << "Key:[" << n.first << "] Value:[" << n.second << "]\n";
    }
 
    std::cout << "Iterate and print keys and values of unordered_map, using auto:\n";
    for( const auto& n : u ) {
        std::cout << "Key:[" << n.first << "] Value:[" << n.second << "]\n";
    }
 
    std::cout << "Iterate and print keys and values using structured binding (since C++17):\n";
    for( const auto& [key, value] : u ) {
        std::cout << "Key:[" << key << "] Value:[" << value << "]\n";
    }
 
    // Add two new entries to the unordered_map
    u["BLACK"] = "#000000";
    u["WHITE"] = "#FFFFFF";
 
    std::cout << "Output values by key:\n";
    std::cout << "The HEX of color RED is:[" << u["RED"] << "]\n";
    std::cout << "The HEX of color BLACK is:[" << u["BLACK"] << "]\n";
}


std::unordered_set
 C++ Containers library std::unordered_set 
Defined in header <unordered_set>
template
    class Key,
    class Hash = std::hash<Key>,
    class KeyEqual = std::equal_to<Key>,
    class Allocator = std::allocator<Key>
> class unordered_set;
(1)	(since C++11)
namespace pmr {
    template <class Key,
              class Hash = std::hash<Key>,
              class Pred = std::equal_to<Key>>
    using unordered_set = std::unordered_set<Key, Hash, Pred,
                                             std::pmr::polymorphic_allocator<Key>>;

Member types
Member type	Definition
key_type	Key
value_type	Key
size_type	Unsigned integer type (usually std::size_t)
difference_type	Signed integer type (usually std::ptrdiff_t)
hasher	Hash
key_equal	KeyEqual
allocator_type	Allocator
reference	value_type&
const_reference	const value_type&
pointer	std::allocator_traits<Allocator>::pointer
const_pointer	std::allocator_traits<Allocator>::const_pointer
iterator	Constant LegacyForwardIterator to value_type
const_iterator	LegacyForwardIterator to const value_type
local_iterator	An iterator type whose category, value, difference, pointer and
reference types are the same as iterator. This iterator
can be used to iterate through a single bucket but not across buckets
const_local_iterator	An iterator type whose category, value, difference, pointer and
reference types are the same as const_iterator. This iterator
can be used to iterate through a single bucket but not across buckets
node_type (since C++17)	a specialization of node handle representing a container node
insert_return_type (since C++17)	type describing the result of inserting a node_type, a specialization of
template <class Iter, class NodeType>
struct /*unspecified*/ {
    Iter     position;
    bool     inserted;
    NodeType node;
};
instantiated with template arguments iterator and node_type.
Member functions
(constructor)
  
(C++11)
 
constructs the unordered_set
(public member function)
(destructor)
  
(C++11)
 
destructs the unordered_set
(public member function)
operator=
  
(C++11)
 
assigns values to the container
(public member function)
get_allocator
  
(C++11)
 
returns the associated allocator
(public member function)
Iterators
begin
cbegin
  
(C++11)
 
returns an iterator to the beginning
(public member function)
end
cend
  
(C++11)
 
returns an iterator to the end
(public member function)
Capacity
empty
  
(C++11)
 
checks whether the container is empty
(public member function)
size
  
(C++11)
 
returns the number of elements
(public member function)
max_size
  
(C++11)
 
returns the maximum possible number of elements
(public member function)
Modifiers
clear
  
(C++11)
 
clears the contents
(public member function)
insert
  
(C++11)
 
inserts elements or nodes (since C++17)
(public member function)
emplace
  
(C++11)
 
constructs element in-place
(public member function)
emplace_hint
  
(C++11)
 
constructs elements in-place using a hint
(public member function)
erase
  
(C++11)
 
erases elements
(public member function)
swap
  
(C++11)
 
swaps the contents
(public member function)
extract
  
(C++17)
 
extracts nodes from the container
(public member function)
merge
  
(C++17)
 
splices nodes from another container
(public member function)
Lookup
count
  
(C++11)
 
returns the number of elements matching specific key
(public member function)
find
  
(C++11)
 
finds element with specific key
(public member function)
contains
  
(C++20)
 
checks if the container contains element with specific key
(public member function)
equal_range
  
(C++11)
 
returns range of elements matching a specific key
(public member function)
Bucket interface
begin(size_type)
cbegin(size_type)
  
(C++11)
 
returns an iterator to the beginning of the specified bucket
(public member function)
end(size_type)
cend(size_type)
  
(C++11)
 
returns an iterator to the end of the specified bucket
(public member function)
bucket_count
  
(C++11)
 
returns the number of buckets
(public member function)
max_bucket_count
  
(C++11)
 
returns the maximum number of buckets
(public member function)
bucket_size
  
(C++11)
 
returns the number of elements in specific bucket
(public member function)
bucket
  
(C++11)
 
returns the bucket for specific key
(public member function)
Hash policy
load_factor
  
(C++11)
 
returns average number of elements per bucket
(public member function)
max_load_factor
  
(C++11)
 
manages maximum average number of elements per bucket
(public member function)
rehash
  
(C++11)
 
reserves at least the specified number of buckets and regenerates the hash table
(public member function)
reserve
  
(C++11)
 
reserves space for at least the specified number of elements and regenerates the hash table
(public member function)
Observers
hash_function
  
(C++11)
 
returns function used to hash the keys
(public member function)
key_eq
  
(C++11)
 
returns the function used to compare keys for equality
(public member function)
Non-member functions
operator==
operator!=
  
(removed in C++20)
 
compares the values in the unordered_set
(function template)
std::swap(std::unordered_set)
  
(C++11)
 
specializes the std::swap algorithm
(function template)
erase_if(std::unordered_set)
  
(C++20)
 
Erases all elements satisfying specific criteria
(function template)

#include <unordered_set>
#include <iostream>

typedef std::unordered_set<char> Myset;
typedef std::allocator<std::pair<const char, int> > Myalloc;
int main()
{
    Myset c1;

    Myset::allocator_type al = c1.get_allocator();
    std::cout << "al == std::allocator() is "
    << std::boolalpha << (al == Myalloc()) << std::endl;

    return (0);
}
// unordered_set_begin.cpp
// compile using: cl.exe /EHsc /nologo /W4 /MTd
#include <unordered_set>
#include <iostream>

using namespace std;

typedef unordered_set<char> MySet;

int main()
{
    MySet c1;

    c1.insert('a');
    c1.insert('b');
    c1.insert('c');

    // display contents using range-based for
    for (auto it : c1) {
    cout << "[" << it << "] ";
    }

    cout << endl;

    // display contents using explicit for
    for (MySet::const_iterator it = c1.begin(); it != c1.end(); ++it) {
        cout << "[" << *it << "] ";
    }

    cout << std::endl;

    // display first two items
    MySet::iterator it2 = c1.begin();
    cout << "[" << *it2 << "] ";
    ++it2;
    cout << "[" << *it2 << "] ";
    cout << endl;

    // display bucket containing 'a'
    MySet::const_local_iterator lit = c1.begin(c1.bucket('a'));
    cout << "[" << *lit << "] ";

    return (0);
}

#include <bits/stdc++.h>
#include <iostream>
#include <vector>
using namespace std;
typedef long long ll;
ll n,m,max1,max2,ans1,ans2,ans3,ans4,zxc,maxs,x1,x2,x3,x4,ind_i= 1,ind_j= 1,maxx,ind_ix= 1,ind_jx= 1;
char x;
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    cin >> n >>m;
    vector <vector <ll>> a(n+1,vector <ll> (m+1));
    vector <vector <ll>> ans(n+1,vector <ll> (m+1));
    for (ll i = 0;i<n;i++){
        for(ll j = 0;j < m;j++){
            cin >> x;
            if (x == '+'){
                a[i][j] = 1;
            }else{
                a[i][j] = 0;
            }
        }
    }
    if(n*m >100){
    maxs = -1e18 - 1;
    max1=0;
    maxx = -1e18 - 1;
    for (ll i = 0;i<n;i++){
        for(ll j = 0;j < m;j++){
            for(ll zxc = 0;zxc < 2;zxc++){
                if(zxc == 1){
                    a[i][j] = (a[i][j]+1)%2;
                }
                if(i==0 && j ==0){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                }else if( i ==0&&j!=0&&j!= m-1){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i==0&&j==m-1){
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i!=0&&i!=n-1&&j==0){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                }else if(i!=0&&i!=n-1&&j!=0&&j!= m-1){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i!=0&&i!=n-1&&j== m-1){
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i==n-1&&j==0){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                }else if(i==n-1&&j!=0&&j!= m-1){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i == n-1&& j == m-1){
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }
                if(zxc == 0){
                    ans[i][j] = max1;
                    max1 = 0;
                }else{
                    ans[i][j] = max1 - ans[i][j];
                    max1 = 0;
                    a[i][j] = (a[i][j]+1)%2;
                    if(ans[i][j]>maxx){
                        maxx = ans[i][j];
                        ind_i = i;
                        ind_j = j;
                    }
                }
            }
        }
    }
    cout <<  ind_i+1<<" "<<ind_j+1<<" ";
    a[ind_i][ind_j] = (a[ind_i][ind_j] +1)%2;

    maxs = -1e18 - 1;
    max1=0;
    maxx = -1e18 - 1;
    for (ll i = 0;i<n;i++){
        for(ll j = 0;j < m;j++){
            for(ll zxc = 0;zxc < 2;zxc++){
                if(zxc == 1){
                    a[i][j] = (a[i][j]+1)%2;
                }
                if(i==0 && j ==0){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                }else if( i ==0&&j!=0&&j!= m-1){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i==0&&j==m-1){
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i!=0&&i!=n-1&&j==0){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                }else if(i!=0&&i!=n-1&&j!=0&&j!= m-1){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i!=0&&i!=n-1&&j== m-1){
                    max1 +=(a[i][j]+a[i+1][j])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i==n-1&&j==0){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                }else if(i==n-1&&j!=0&&j!= m-1){
                    max1 +=(a[i][j]+a[i][j+1])%2;
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }else if(i == n-1&& j == m-1){
                    max1 +=(a[i][j]+a[i-1][j])%2;
                    max1 +=(a[i][j]+a[i][j-1])%2;
                }
                if(zxc == 0){
                    ans[i][j] = max1;
                    max1 = 0;
                }else{
                    ans[i][j] = max1 - ans[i][j];
                    max1 = 0;
                    a[i][j] = (a[i][j]+1)%2;
                    if(ans[i][j]>maxx && (i !=ind_i || j!=ind_j)){
                        maxx = ans[i][j];
                        ind_ix = i;
                        ind_jx = j;
                    }
                }
            }
        }
    }
    cout <<  ind_ix+1<<" "<<ind_jx+1;}
    else{
            maxs = -1e18 - 1;
    max1=0;
                for (ll i = 0;i<n;i++){
                for(ll j = 0;j < m;j++){
                    if (j == m-1){
                        if(i != n-1){
                            max1 += (a[i][j]+a[i+1][j])%2;
                        }
                    }else{
                         if(i != n-1){
                            max1 += (a[i][j]+a[i+1][j])%2;
                            max1 += (a[i][j]+a[i][j+1])%2;
                        }else{
                            max1 += (a[i][j]+a[i][j+1])%2;
                        }
                    }
                }
            }
    max1 = 0;
    for(ll y = 0;y<(n*m);y++){
        ans1 = y/m;
        ans2 = y%m;
        zxc = y+1;
        a[ans1][ans2] = (a[ans1][ans2]+1)%2;
        for(ll z = zxc;z<n*m;z++){
            ans3 = z/m;
            ans4 = z%m;
            a[ans3][ans4] = (a[ans3][ans4]+1)%2;
            for (ll i = 0;i<n;i++){
                for(ll j = 0;j < m;j++){
                    if (j == m-1){
                        if(i != n-1){
                            max1 += (a[i][j]+a[i+1][j])%2;
                        }
                    }else{
                         if(i != n-1){
                            max1 += (a[i][j]+a[i+1][j])%2;
                            max1 += (a[i][j]+a[i][j+1])%2;
                        }else{
                            max1 += (a[i][j]+a[i][j+1])%2;
                        }
                    }
                }
            }
            if (max1 > maxs){
                maxs = max1;
                x1 = ans1;
                x2 = ans2;
                x3 = ans3;
                x4 = ans4;
            }
            max1 = 0;
            a[ans3][ans4] = (a[ans3][ans4]+1)%2;
        }
        a[ans1][ans2] = (a[ans1][ans2]+1)%2;
    }
    cout<< x1+1<<' '<<x2+1<<' '<<x3+1<<' '<<x4+1;
    }
}
bool	1	0   /   255
целочисленный (символьный) тип данных

char	1	0   /   255
 целочисленные типы данных

short int	2	-32 768    /    32 767
unsigned short int	2	0  /  65 535
int	4	-2 147 483 648   /   2 147 483 647
unsigned int	4	0     /     4 294 967 295
long int	4	-2 147 483 648    /    2 147 483 647
unsigned long int	4	0     /     4 294 967 295
типы данных с плавающей точкой

float	4	-2 147 483 648.0  / 2 147 483 647.0
long float	8	-9 223 372 036 854 775 808 .0   /   9 223 372 036 854 775 807.0
double

#include <bits/stdc++.h>

using namespace std;

const int SIZE = (1 << 17);
int a[100100]; // исходный массив
int tree[2 * SIZE]; 
int tree_add[2 * SIZE];
int n; // кол-во элементов в исходном массиве

void push(int v, int L, int R)
{
    if (L != R - 1) // Условие проталкивания
    {
        tree_add[2 * v + 1] = tree_add[v];
        tree_add[2 * v + 2] = tree_add[v];
    }
    tree[v] += tree_add[v] * (R - L); // Пересчёт
    tree_add[v] = 0;
}

void build_sum_tree(int v, int L, int R)
{
	if (L == R - 1) // Условие выхода
	{
		if (L < n) // Поскольку мы объявляем большую размерность, необходимо следить за границей
		{
			tree[v] = a[L];
		}
		return; // Присвоили, возвращаемся
	}
	int M = (L + R) / 2; // Выбираем серидину отрезка [L..R]
	build_sum_tree(2 * v + 1, L, M); // Запускаем сумму для левого потомка
	build_sum_tree(2 * v + 2, M, R); // И для правого
	tree[v] = tree[2 * v + 1] + tree[2 * v + 2]; // Обновляем текущую вершину
}

// Usage:
// build_sum_tree(0, 0, SIZE); Строим дерево от нулевой вершины с границей от 0 до SIZE (можно n)

int64_t get_summary(int v, int L, int R, int l, int r) // L, R - обрабатываемые функцией границы, l, r - границы запроса
{
    push(v, L, R);
    if (r <= L || R <= l) return 0; // Первое условие
    if (l <= L && R <= r) return tree[v]; // Второе условие
    int M = (L + R) / 2;
    int64_t first_child = get_summary(2 * v + 1, L, M, l, r);
    int64_t second_child = get_summary(2 * v + 2, M, R, l, r);
    return first_child + second_child;
}

// Usage:
// build_sum_tree(0, 0, SIZE);
// int l, r; cin >> l >> r; --l;
// int sum = (get_summary(0, 0, SIZE, l, r));

void set_in_sum_tree(int v, int L, int R, int i, int x)
{
    if (L == R - 1)
    {
        tree[v] = x;
        a[i] = x;
        return;
    }
    int M = (L + R) / 2;
    if (i < M) set_in_sum_tree(2 * v + 1, L, M, i, x);
    else set_in_sum_tree(2 * v + 2, M, R, i, x);
    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];
}

// Usage:
// build_sum_tree(0, 0, SIZE);
// int i, x; cin >> i >> x; --i;
// set_in_sum_tree(0, 0, SIZE, i, x);

void set_range(int v, int L, int R, int l, int r, int x)
{
    push(v, L, R);
    if (r <= L || R <= l) return;
    if (l <= L && R <= r)
    {
        tree_add[v] += x;
        push(v, L, R);
        return;
    }
    int M = (L + R) / 2;
    set_range(2 * v + 1, L, M, l, r, x);
    set_range(2 * v + 2, M, R, l, r, x);
    tree[v] = tree[2 * v + 1] + tree[2 * v + 2];
}

// Usage:
// build_sum_tree(0, 0, SIZE);
// int l, r, x; cin >> l >> r >> x; --l;
// set_range(0, 0, SIZE, l, r, x);

int main()
{
    cin >> n;
    for (int i = 0; i < n; ++i) cin >> a[i];

    build_sum_tree(0, 0, SIZE);

    int q;
    cin >> q;

    for (int req = 0; req < q; ++req)
    {
        string type;
        cin >> type;
        if (type == "1")
        {
            int l, r, x;
            cin >> l >> r >> x;
            --l;
            set_range(0, 0, SIZE, l, r, x);
        }
        else if (type == "2")
        {
            int i, x;
            cin >> i >> x;
            --i;
            set_in_sum_tree(0, 0, SIZE, i, x);
        }
        else if (type == "3")
        {
            int l, r;
            cin >> l >> r;
            --l;
            cout << get_summary(0, 0, SIZE, l, r) << endl;
        }
        else if (type == "4")
        {
            for (int i = 0; i < n; ++i) cout << a[i] << " ";
            cout << endl;
        }
    }
    return 0;
}
Дерево отрезков
 https://informatics.msk.ru/course/view.php?id=18

